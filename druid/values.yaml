# Default values for druid.

image:
  repository: apache/incubator-druid
  tag: 0.16.0-incubating
  pullPolicy: IfNotPresent

extensions:
  loadList:
    - druid-histogram
    - druid-datasketches
    - druid-lookups-cached-global
    - postgresql-metadata-storage
    - druid-s3-extensions
    - druid-kafka-indexing-service
    - druid-parquet-extensions
    - druid-kinesis-indexing-service

env:
  DRUID_USE_CONTAINER_IP: true

  # Metadata storage
  # only change these if using your own postgres instance (i.e. postgresql.enabled: false)
  # leave as-is otherwise
  druid_metadata_storage_host:
  druid_metadata_storage_type: postgresql
  druid_metadata_storage_connector_connectURI: jdbc:postgresql://druid-postgresql:5432/druid
  druid_metadata_storage_connector_user: druid
  druid_metadata_storage_connector_password: druid

  # Deep storage
  # specify your bucket name for s3 deep storage
  druid_storage_type: s3
  druid_storage_bucket: <druid-deep-storage-bucket>
  druid_storage_baseKey: druid/segments
  druid_indexer_logs_type: s3
  druid_indexer_logs_s3Bucket: <druid-deep-storage-bucket>
  druid_indexer_logs_s3Prefix: druid/indexing-logs

  druid_coordinator_balancer_strategy: cachingCost

  druid_indexer_queue_startDelay: PT30S

  druid_indexer_runner_javaOptsArray: '["-server", "-Xmx2g", "-Xms2g", "-XX:MaxDirectMemorySize=6g", "-Duser.timezone=UTC", "-Dfile.encoding=UTF-8", "-Djava.util.logging.manager=org.apache.logging.log4j.jul.LogManager"]'
  druid_processing_buffer_sizeBytes: "10000000"
  druid_processing_numMergeBuffers: "4"
  druid_processing_numThreads: "16"
  druid.server.maxSize: "8000000000"

  druid_worker_capacity: "4"
  druid_indexer_fork_property_druid_processing_numMergeBuffers: "2"
  druid_indexer_fork_property_druid_processing_buffer_sizeBytes: "10000000"
  druid_indexer_fork_property_druid_processing_numThreads: "1"

  druid_emitter_logging_logLevel: debug
  DRUID_LOG4J: '<?xml version="1.0" encoding="UTF-8" ?><Configuration status="WARN"><Appenders><Console name="Console" target="SYSTEM_OUT"><PatternLayout pattern="%d{ISO8601} %p [%t] %c - %m%n"/></Console></Appenders><Loggers><Root level="info"><AppenderRef ref="Console"/></Root><Logger name="org.apache.druid.jetty.RequestLog" additivity="false" level="DEBUG"><AppenderRef ref="Console"/></Logger></Loggers></Configuration>'

turnilo:
  replicaCount: 1
  name: turnilo
  version: 1.18.0
  serviceType: ClusterIP
  servicePort: 80
  ingress:
    enabled: false
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
    - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}

router:
  replicaCount: 1
  name: router
  port: 8888
  servicePort: 80
  serviceType: ClusterIP
  javaOpts: "-Xms1G -Xmx1G"
  ingress:
    enabled: false
    annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
    - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}

broker:
  replicaCount: 1
  name: broker
  port: 8082
  serviceType: ClusterIP
  javaOpts: "-Xms2G -Xmx2G -XX:MaxDirectMemorySize=8g"
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}


coordinator:
  replicaCount: 1
  name: coordinator
  port: 8081
  serviceType: ClusterIP
  javaOpts: "-Xms1G -Xmx1G"
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}

# coordinator also runs an overlord by default (master node)
# so skipping this with replicaCount=0
overlord:
  replicaCount: 0
  name: overlord
  port: 8090
  serviceType: ClusterIP
  javaOpts: "-Xms1G -Xmx1G"
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  podAnnotations: {}

historical:
  name: historical
  replicaCount: 1
  port: 8083
  serviceType: ClusterIP
  javaOpts: "-Xms2G -Xmx2G -XX:MaxDirectMemorySize=6g"
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: "4Gi"
    # storageClass: "ssd"
  antiAffinity: "soft"
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  resources: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    # minAvailable: 2
    maxUnavailable: 1
  updateStrategy:
    type: RollingUpdate


middleManager:
  name: middle-manager
  replicaCount: 1
  port: 8091
  serviceType: ClusterIP
  javaOpts: "-Xms2G -Xmx2G"
  ingress:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    path: /
    hosts:
      - chart-example.local
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local
  persistence:
    enabled: true
    accessMode: ReadWriteOnce
    size: "4Gi"
    # storageClass: "ssd"
  antiAffinity: "soft"
  nodeAffinity: {}
  nodeSelector: {}
  tolerations: []
  resources: {}
  podAnnotations: {}
  podDisruptionBudget:
    enabled: false
    # minAvailable: 2
    maxUnavailable: 1
  updateStrategy:
    type: RollingUpdate


# ------------------------------------------------------------------------------
# Zookeeper:
# ------------------------------------------------------------------------------

# zkHosts: druid-zookeeper-headless:2181

zookeeper:
  enabled: true
  ## Environmental variables to set in Zookeeper
  ##
  env:
    ## The JVM heap size to allocate to Zookeeper
    ZK_HEAP_SIZE: "512M"
  ## Configure Zookeeper persistence
  persistence:
    enabled: true


# ------------------------------------------------------------------------------
# PostgreSql:
# ------------------------------------------------------------------------------
postgresql:
  enabled: true
  postgresqlPostgresPassword: druidroot
  postgresqlUsername: druid
  postgresqlPassword: druid
  postgresqlDatabase: druid
