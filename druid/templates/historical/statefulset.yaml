apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app: {{ include "druid.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    component: {{ .Values.historical.name }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ include "druid.historical.fullname" . }}
spec:
  serviceName: {{ include "druid.historical.fullname" . }}
  replicas: {{ .Values.historical.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "druid.name" . }}
      release: {{ .Release.Name }}
      component: {{ .Values.historical.name }}
  template:
    metadata:
      labels:
        app: {{ include "druid.name" . }}
        component: {{ .Values.historical.name }}
        release: {{ .Release.Name }}
        {{- with .Values.historical.podAnnotations }}
      annotations:
{{ toYaml . | indent 8 }}
        {{- end }}
    spec:
      {{- if or .Values.historical.antiAffinity .Values.historical.nodeAffinity }}
      affinity:
      {{- end }}
      {{- if eq .Values.historical.antiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app: "{{ template "druid.name" . }}"
                  release: "{{ .Release.Name }}"
                  component: "{{ .Values.historical.name }}"
      {{- else if eq .Values.historical.antiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchLabels:
                  app: "{{ template "druid.name" . }}"
                  release: "{{ .Release.Name }}"
                  component: "{{ .Values.historical.name }}"
      {{- end }}
      {{- with .Values.historical.nodeAffinity }}
        nodeAffinity:
{{ toYaml . | indent 10 }}
      {{- end }}
{{- if .Values.historical.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.historical.nodeSelector | indent 8 }}
{{- end }}
{{- if .Values.historical.tolerations }}
      tolerations:
{{ toYaml .Values.historical.tolerations | indent 8 }}
{{- end }}
      containers:
      - name: {{ include "druid.historical.fullname" . }}
        args: [ "historical" ]
        env:
        {{- if .Values.zookeeper.enabled }}
        - name: druid_zk_service_host
          value: {{ .Release.Name }}-zookeeper-headless:2181
        {{- else }}
        - name: druid_zk_service_host
          value: {{ .Values.zkHosts }}
        {{- end }}
        {{- if .Values.postgresql.enabled }}
        - name: druid_metadata_storage_type
          value: postgresql
        - name: druid_metadata_storage_connector_connectURI
          value: "jdbc:postgresql://{{ .Release.Name }}-postgresql:5432/{{ .Values.postgresql.postgresqlDatabase }}"
        - name: druid_metadata_storage_connector_user
          value: "{{ .Values.postgresql.postgresqlUsername }}"
        - name: druid_metadata_storage_connector_password
          value: "{{ .Values.postgresql.postgresqlPassword }}"
        {{- end }}
        - name: druid_extensions_loadList
          value: {{ .Values.extensions.loadList | toJson | quote }}
        - name: JAVA_OPTS
          value: {{ .Values.historical.javaOpts }}
        {{- range $key, $value :=  mergeOverwrite .Values.env .Values.historical.env }}
        - name: {{ $key }}
          value: {{ $value | quote }}
        {{- end }}
        {{- if .Values.monitoring.enabled }}
        - name: druid_monitoring_monitors
          value: '["org.apache.druid.server.metrics.HistoricalMetricsMonitor","org.apache.druid.server.metrics.QueryCountStatsMonitor"]'
        - name: druid_emitter
          value: http
        - name: druid_emitter_http_recipientBaseUrl
          value: "http://localhost:{{ .Values.monitoring.port }}"
        {{- end}}
        resources:
{{ toYaml .Values.historical.resources | indent 12 }}
        livenessProbe:
          initialDelaySeconds: {{ .Values.historical.health.livenessInitialDelaySeconds }}
          timeoutSeconds: 10
          httpGet:
            path: /status/health
            port: {{ .Values.historical.port }}
        readinessProbe:
          initialDelaySeconds: {{ .Values.historical.health.readinessInitialDelaySeconds }}
          timeoutSeconds: 10
          httpGet:
            path: /status/selfDiscovered
            port: {{ .Values.historical.port }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
        ports:
        - containerPort: {{ .Values.historical.port }}
          name: http
        volumeMounts:
        - mountPath: /opt/druid/var
          name: data


      {{- if .Values.monitoring.enabled }}
      - name: druid-metrics-exporter
        image: featurefm/druid-exporter
        imagePullPolicy: Always
        command: [".venv/bin/druid_exporter", "--debug", "--listen=:{{ .Values.monitoring.port }}"]
        ports:
          - name: metrics
            containerPort: {{ .Values.monitoring.port }}
        livenessProbe:
          httpGet:
            path: /metrics
            port: metrics
        readinessProbe:
          httpGet:
            path: /metrics
            port: metrics
      {{- end }}


  {{- if not .Values.historical.persistence.enabled }}
      volumes:
      - name: data
        emptyDir: {}
  {{- end }}
      securityContext:
        fsGroup: 1000
  updateStrategy:
    type: {{ .Values.historical.updateStrategy.type }}
  {{- if .Values.historical.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
        - {{ .Values.historical.persistence.accessMode | quote }}
    {{- if .Values.historical.persistence.storageClass }}
    {{- if (eq "-" .Values.historical.persistence.storageClass) }}
      storageClassName: ""
    {{- else }}
      storageClassName: "{{ .Values.historical.persistence.storageClass }}"
    {{- end }}
    {{- end }}
      resources:
        requests:
          storage: "{{ .Values.historical.persistence.size }}"
  {{ end }}
